var mapOptions;
var dataResults;
var map;
var x = 0;
var flag = true;

var gps_flag = true;
var use_gps = false;


var markers = new Array();
var paths = new Array();
var niza = new Array();

var destinacija = null;
var start = null;

var colors = ['#FFFF00', '#FF1919', '#6666FF'];

var textStartAddress = null;
var textEndAddress = null;

var autocomplete1 = null;
var autocomplete2 = null;

var auto1 = false;
var auto2 = false;

// Get all bus numbers with bus stations
function getLinesArray() {
    var data = {
        "41": [
            [41.939304, 21.532305],
            [41.939404, 21.52361],
            [41.937293, 21.52205],
            [41.939392, 21.515914],
            [41.940764, 21.511826],
            [41.938147, 21.509144],
            [41.939903, 21.499818],
            [41.948545, 21.493598],
            [41.951697, 21.491536],
            [41.955391, 21.487418],
            [41.959285, 21.483663],
            [41.964925, 21.475292],
            [41.969784, 21.465296],
            [41.97316, 21.458109],
            [41.97574, 21.452552],
            [41.978947, 21.445648],
            [41.984494, 21.438474],
            [41.989338, 21.435917],
            [41.992305, 21.438599],
            [41.993293, 21.442551],
            [41.989861, 21.445324]
        ],
        "7": [
            [41.971498, 21.476887],
            [41.973949, 21.471652],
            [41.975384, 21.46854],
            [41.97723, 21.464583],
            [41.982909, 21.452522],
            [41.985625, 21.446546],
            [41.987188, 21.44322],
            [41.991079, 21.444851],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.998342, 21.424407],
            [41.999482, 21.418796],
            [42.000885, 21.411898],
            [42.001619, 21.406168],
            [42.00248, 21.399924],
            [42.003668, 21.391427],
            [42.007891,21.391089],
        ],
        "15": [
            [41.985071, 21.48359],
            [41.982343, 21.481512],
            [41.979803, 21.477402],
            [41.982004, 21.47266],
            [41.982723, 21.47116],
            [41.985402, 21.466416],
            [41.986741, 21.463991],
            [41.989134, 21.458048],
            [41.988336, 21.454121],
            [41.988751, 21.45013],
            [41.991207, 21.446203],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.998342, 21.424407],
            [41.999482, 21.418796],
            [42.000885, 21.411898],
            [42.001619, 21.406168],
            [42.00248, 21.399924],
            [42.003668, 21.391427],
            [42.007891,21.391089]
        ],
        "15a": [
            [41.985071, 21.48359],
            [41.982343, 21.481512],
            [41.979803, 21.477402],
            [41.982004, 21.47266],
            [41.982723, 21.47116],
            [41.985402, 21.466416],
            [41.986741, 21.463991],
            [41.989134, 21.458048],
            [41.988336, 21.454121],
            [41.988751, 21.45013],
            [41.991207, 21.446203],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.997811, 21.42846],
            [41.999627, 21.428543],
            [42.002824, 21.422036],
            [42.005806, 21.41635],
            [42.006675, 21.411313],
            [42.007082, 21.404682],
            [42.007255, 21.400214],
            [42.007518, 21.395879],
            [42.007606, 21.393626],
            [42.007891,21.391089]
        ],
        "31": [
            [41.958884, 21.538572],
            [41.957037, 21.535232],
            [41.955077, 21.532767],
            [41.952719, 21.531938],
            [41.949976, 21.530604],
            [41.945158, 21.5278],
            [41.943181, 21.526681],
            [41.939404, 21.52361],
            [41.937293, 21.52205],
            [41.939392, 21.515914],
            [41.940764, 21.511826],
            [41.938147, 21.509144],
            [41.939903, 21.499818],
            [41.948545, 21.493598],
            [41.951697, 21.491536],
            [41.955391, 21.487418],
            [41.959285, 21.483663],
            [41.964925, 21.475292],
            [41.969784, 21.465296],
            [41.97316, 21.458109],
            [41.97316, 21.458109],
            [41.978947, 21.445648],
            [41.984494, 21.438474],
            [41.989338, 21.435917],
            [41.992305, 21.438599],
            [41.993293, 21.442551],
            [41.989861, 21.445324]
        ],
        "5": [
            [41.986203,21.48164],
            [41.985071, 21.48359],
            [41.982343, 21.481512],
            [41.979803, 21.477402],
            [41.982004, 21.47266],
            [41.982723, 21.47116],
            [41.985402, 21.466416],
            [41.986741, 21.463991],
            [41.989134, 21.458048],
            [41.988336, 21.454121],
            [41.988751, 21.45013],
            [41.991207, 21.446203],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.995178, 21.423844],
            [41.994596, 21.417546],
            [41.995561, 21.410218],
            [41.99627, 21.405391],
            [41.996805, 21.40112],
            [41.998189, 21.391317],
            [41.998811, 21.386097],
            [41.999417, 21.382401],
            [42.001371, 21.377241],
            [42.003926, 21.373223],
            [42.006306, 21.369087],
            [42.007, 21.364551],
            [42.006703, 21.359104],
            [42.006484, 21.355062],
            [42.006273, 21.35092],
            [42.006267, 21.343639],
            [42.006983, 21.340756],
            [42.007861, 21.340004],
            [42.010556, 21.339907]
        ],
        "2": [
            [42.004057, 21.332267],
            [42.006832, 21.334025],
            [42.006983, 21.340756],
            [42.006267, 21.343639],
            [42.006273, 21.35092],
            [42.006484, 21.355062],
            [42.006703, 21.359104],
            [42.007, 21.364551],
            [42.008316, 21.3697],
            [42.007084, 21.374233],
            [42.004575, 21.384637],
            [42.003668, 21.391427],
            [42.00248, 21.399924],
            [42.001619, 21.406168],
            [42.000885, 21.411898],
            [41.999482, 21.418796],
            [41.998342, 21.424407],
            [41.997811, 21.42846],
            [41.999266, 21.43288],
            [41.998821, 21.439166],
            [42.000089, 21.44013],
            [42.000892, 21.439964],
            [42.001943, 21.439822],
            [42.001943, 21.439822],
            [41.999395, 21.452186],
            [42.000823, 21.459914],
            [42.001681, 21.465046]
        ],
        "2a": [
            [42.004057, 21.332267],
            [42.006832, 21.334025],
            [42.006983, 21.340756],
            [42.006267, 21.343639],
            [42.006273, 21.35092],
            [42.006484, 21.355062],
            [42.006703, 21.359104],
            [42.007, 21.364551],
            [42.008316, 21.3697],
            [42.007084, 21.374233],
            [42.004575, 21.384637],
            [42.003668, 21.391427],
            [42.00248, 21.399924],
            [42.001619, 21.406168],
            [42.000885, 21.411898],
            [41.999482, 21.418796],
            [41.998342, 21.424407],
            [41.997811, 21.42846],
            [41.999266, 21.43288],
            [41.998821, 21.439166],
            [42.000089, 21.44013],
            [42.000892, 21.439964],
            [42.001943, 21.439822],
            [42.001943, 21.439822],
            [41.999395, 21.452186],
            [42.000625, 21.45893],
            [42.00631, 21.46312],
            [42.013471,21.457608]
        ],
        "42": [
            [41.932764, 21.521019],
            [41.934891, 21.52147],
            [41.939392, 21.515914],
            [41.940764, 21.511826],
            [41.938147, 21.509144],
            [41.939903, 21.499818],
            [41.948545, 21.493598],
            [41.951697, 21.491536],
            [41.955391, 21.487418],
            [41.959285, 21.483663],
            [41.964925, 21.475292],
            [41.969784, 21.465296],
            [41.97311, 21.460973],
            [41.97723, 21.464583],
            [41.982723, 21.47116],
            [41.987673, 21.473525],
            [41.989265, 21.474044],
            [41.994193, 21.475514],
            [41.996682, 21.476005],
            [42.000896, 21.471327],
            [42.001681, 21.465046],
            [42.000823, 21.459914],
            [42.00631, 21.46312],
            [42.013471, 21.457608]
        ],
        "13": [
            [41.969161, 21.448571],
            [41.971373, 21.445166],
            [41.977903, 21.445148],
            [41.97316, 21.458109],
            [41.97574, 21.452552],
            [41.97311, 21.460973],
            [41.97723, 21.464583],
            [41.982723, 21.47116],
            [41.987673, 21.473525],
            [41.989265, 21.474044],
            [41.994193, 21.475514],
            [41.996682, 21.476005],
            [42.000896, 21.471327],
            [42.001681, 21.465046],
            [42.000823, 21.459914],
            [42.00631, 21.46312],
            [42.013471,21.457608]
        ],
        "3": [
            [41.9922, 21.465247],
            [41.989265, 21.474044],
            [41.985071, 21.48359],
            [41.982343, 21.481512],
            [41.979803, 21.477402],
            [41.982004, 21.47266],
            [41.982723, 21.47116],
            [41.985402, 21.466416],
            [41.986741, 21.463991],
            [41.989134, 21.458048],
            [41.988336, 21.454121],
            [41.988751, 21.45013],
            [41.991207, 21.446203],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.990314, 21.420625],
            [41.98357, 21.41873],
            [41.982699, 21.421562],
            [41.981131, 21.420872],
            [41.993924,21.424622],
        ],
        "3b": [
            [41.996059, 21.492927],
            [41.996682, 21.476005],
            [41.994193, 21.475514],
            [41.989265, 21.474044],
            [41.985071, 21.48359],
            [41.982343, 21.481512],
            [41.979803, 21.477402],
            [41.982004, 21.47266],
            [41.982723, 21.47116],
            [41.985402, 21.466416],
            [41.986741, 21.463991],
            [41.989134, 21.458048],
            [41.988336, 21.454121],
            [41.988751, 21.45013],
            [41.991207, 21.446203],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.990314, 21.420625],
            [41.993924, 21.424622],
            [41.988382,21.417852]
        ],
        "Mileniumski": [
            [41.991207, 21.446203],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.990314, 21.420625],
            [41.993924, 21.424622],
            [41.982699, 21.421562],
            [41.981131, 21.420872],
            [41.974992,21.408733]
        ],
        "24": [
            [41.962402, 21.44984],
            [41.969161, 21.448571],
            [41.971373, 21.445166],
            [41.977665,21.437405],
            [41.986885, 21.432878],
            [41.990075, 21.433994],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.998342, 21.424407],
            [41.999482, 21.418796],
            [42.000885, 21.411898],
            [42.001619, 21.406168],
            [42.00248, 21.399924],
            [42.003668, 21.391427],
            [41.998463,21.388975]
        ],
        "22": [
            [41.991207, 21.446203],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.998342, 21.424407],
            [41.999482, 21.418796],
            [42.000885, 21.411898],
            [42.001619, 21.406168],
            [42.00248, 21.399924],
            [42.003668, 21.391427],
            [42.008316, 21.3697],
            [42.006787, 21.375393],
            [42.004575, 21.384637],
            [42.009976, 21.363055],
            [42.015139, 21.358393],
            [42.018623, 21.354766],
            [42.02366, 21.348909],
            [42.028482,21.353769]
        ],
        "4": [
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.998342, 21.424407],
            [41.999482, 21.418796],
            [42.000885, 21.411898],
            [42.001619, 21.406168],
            [42.00248, 21.399924],
            [42.003668, 21.391427],
            [42.006787, 21.375393],
            [42.001987, 21.373118],
            [41.97574, 21.452552],
            [41.978947, 21.445648],
            [41.984494, 21.438474],
            [41.989338, 21.435917],
            [41.976357, 21.453863],
            [42.004575, 21.384637]
        ],
        "4a": [
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [42.006787, 21.375393],
            [42.001987, 21.373118],
            [41.97574, 21.452552],
            [41.978947, 21.445648],
            [41.984494, 21.438474],
            [41.989338, 21.435917],
            [42.004575, 21.384637],
            [41.994524, 21.430796],
            [41.995178, 21.423844],
            [41.994596, 21.417546],
            [41.995561, 21.410218],
            [41.99627, 21.405391],
            [41.996805, 21.40112],
            [41.969784, 21.465296],
            [41.97316, 21.458109],
            [41.97574, 21.452552],
            [41.998189, 21.391317],
            [41.965284,21.461883]
        ],
        "16": [
            [42.000089, 21.44013],
            [42.000892, 21.439964],
            [42.001943, 21.439822],
            [41.999395, 21.452186],
            [42.000625, 21.45893],
            [42.00631, 21.46312],
            [42.013471, 21.457608],
            [41.998821, 21.439166],
            [41.997575, 21.438073],
            [41.99388, 21.436115],
            [41.990075, 21.433994],
            [41.991843, 21.434342],
            [41.986626, 21.430605],
            [41.983955, 21.428551],
            [41.981707, 21.431928],
            [41.978453, 21.434686],
            [41.976236, 21.432969]


        ],
        "17": [
            [42.000089, 21.44013],
            [42.000892, 21.439964],
            [42.001943, 21.439822],
            [42.001943, 21.439822],
            [41.998821, 21.439166],
            [41.997575, 21.438073],
            [41.99388, 21.436115],
            [41.991843, 21.434342],
            [41.971498, 21.476887],
            [41.973949, 21.471652],
            [41.975384, 21.46854],
            [41.97723, 21.464583],
            [41.982909, 21.452522],
            [41.985625, 21.446546],
            [41.987188, 21.44322],
            [41.991079, 21.444851],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [42.00991, 21.430802],
            [42.008557, 21.433715],
            [41.972136, 21.477934],
            [41.975058, 21.480179],
            [41.976837, 21.482989],
            [41.981572, 21.490712]
        ],
        "7b": [
            [41.991843, 21.434342],
            [41.971498, 21.476887],
            [41.973949, 21.471652],
            [41.975384, 21.46854],
            [41.97723, 21.464583],
            [41.982909, 21.452522],
            [41.985625, 21.446546],
            [41.987188, 21.44322],
            [41.991079, 21.444851],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.994524, 21.430796],
            [41.993924, 21.424622],
            [41.99305, 21.421942]
        ],
        "57": [
            [41.998431, 21.379083],
            [41.996723, 21.386014],
            [41.994737, 21.395587],
            [41.993829, 21.402344],
            [41.993549, 21.408429],
            [41.993215, 21.413581],
            [41.992342, 21.421289],
            [41.994524, 21.430796],
            [41.993924, 21.424622],
            [41.998821, 21.439166],
            [41.997575, 21.438073],
            [41.99388, 21.436115],
            [42.000089, 21.44013],
            [42.000892, 21.439964],
            [42.001943, 21.439822],
            [42.008448, 21.443372],
            [42.013141, 21.445433],
            [42.017624, 21.447533],
            [42.021683, 21.449245],
            [42.024567, 21.448169],
            [42.029325, 21.444816],
            [42.031613, 21.445385],
            [42.035462, 21.446238],
            [42.036509, 21.446259],
            [42.040517, 21.448813],
            [42.043486, 21.45065],
            [42.049167, 21.449835],
            [42.051876, 21.450457],
            [42.055285, 21.450961],
            [42.062359, 21.451262],
            [42.065902, 21.4515],
            [42.072131, 21.448877]
        ],
        "8": [
            [41.999266, 21.43288],
            [41.998821, 21.439166],
            [42.000089, 21.44013],
            [42.000089, 21.44013],
            [42.000892, 21.439964],
            [42.001943, 21.439822],
            [42.008448, 21.443372],
            [42.013141, 21.445433],
            [42.017624, 21.447533],
            [42.021683, 21.449245],
            [42.024567, 21.448169],
            [42.029325, 21.444816],
            [42.031613, 21.445385],
            [42.035462, 21.446238],
            [42.036509, 21.446259],
            [42.040517, 21.448813],
            [41.999627, 21.428543],
            [42.002824, 21.422036],
            [42.005806, 21.41635],
            [42.006675, 21.411313],
            [42.007082, 21.404682],
            [42.007255, 21.400214],
            [42.007518, 21.395879],
            [42.007606, 21.393626],
            [42.007891, 21.391089],
            [42.007614, 21.383927],
            [42.004824, 21.374379],
            [42.041279, 21.451412],
            [42.039749, 21.454555],
            [42.044833,21.459126]
        ],
        "50": [
            [42.003157, 21.473116],
            [42.002878, 21.479629],
            [42.000678, 21.485712],
            [42.000112, 21.487386],
            [41.997364, 21.495113],
            [41.996013, 21.499641],
            [41.994661, 21.503803],
            [41.993612, 21.505917],
            [41.99163, 21.509311],

            [41.998821, 21.439166],
            [42.000089, 21.44013],
            [42.000892, 21.439964],
            [42.001943, 21.439822],
            [42.001943, 21.439822],
            [41.999395, 21.452186],
            [42.000823, 21.459914],
            [42.001681, 21.465046],
            [41.998821, 21.439166],
            [41.997575, 21.438073],
            [41.99388, 21.436115],
            [41.994524, 21.430796],
            [41.990314, 21.420625],
            [41.993924, 21.424622],
            [41.988382, 21.417852]
        ],
        "44": [
            [41.979792,21.52895],
            [41.981375, 21.5263],
            [41.983106,21.523452],
            [41.986397,21.517994],
            [41.989154, 21.513407],        
            [41.997364, 21.495113],
            [41.996013, 21.499641],
            [41.994661, 21.503803],
            [41.993612, 21.505917],
            [41.99163, 21.509311],
            [41.996059, 21.492927],
            [41.996682, 21.476005],
            [41.994193, 21.475514],
            [41.989265, 21.474044],
            [41.982723, 21.47116],
            [41.985402, 21.466416],
            [41.986741, 21.463991],
            [41.989134, 21.458048],
            [41.988336, 21.454121],
            [41.988751, 21.45013],
            [41.991207, 21.446203],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.993924, 21.424622],
            [41.99305, 21.421942] // Nova Makedonija
        ],
        "35": [
            [41.985071, 21.48359],
            [41.982343, 21.481512],
            [41.979803, 21.477402],
            [41.982004, 21.47266],
            [41.982723, 21.47116],
            [41.985402, 21.466416],
            [41.986741, 21.463991],
            [41.989134, 21.458048],
            [41.988336, 21.454121],
            [41.988751, 21.45013],
            [41.991207, 21.446203],
            [41.993293, 21.442551],
            [41.996634, 21.440633], // MANU
            [42.000089, 21.44013],  // Bit Pazar 1
            [42.000892, 21.439964],
            [42.001943, 21.439822],
            [42.008448, 21.443372],
            [42.013141, 21.445433],
            [42.017624, 21.447533],
            [42.021401, 21.448342],
            [42.021909, 21.443969],
            [42.025033, 21.443053],
            [42.026163,21.439952]
        ],
        "26": [
            [41.994524, 21.430796],
            [41.998342, 21.424407],
            [41.999482, 21.418796],
            [42.000885, 21.411898],
            [42.001619, 21.406168],
            [42.00248, 21.399924],
            [42.003668, 21.391427],
            [42.007891, 21.391089],
            [41.994524, 21.430796],       
            [41.998821, 21.439166],
            [41.997575, 21.438073],
            [41.99388, 21.436115],
            [42.000089, 21.44013],
            [42.000892, 21.439964],
            [42.001943, 21.439822],
            [42.008448, 21.443372],
            [42.013141, 21.445433],
            [42.017624, 21.447533],
            [42.020128, 21.451345],
            [42.017426,21.453394],
            [42.013471, 21.457608]
        ],
        "33": [
            [41.958884, 21.538572],
            [41.957037, 21.535232],
            [41.971441, 21.481213],
            [41.969363, 21.486979],
            [41.966792, 21.490174],
            [41.964951, 21.494267],
            [41.965037, 21.497314],
            [41.963956, 21.50027],
            [41.962377, 21.504489],
            [41.960051, 21.513104],
            [41.958166, 21.521424],
            [41.957195, 21.530514],
          
            [41.971498, 21.476887],
            [41.973949, 21.471652],
            [41.975384, 21.46854],
            [41.97723, 21.464583],
            [41.982909, 21.452522],
            [41.985625, 21.446546],
            [41.987188, 21.44322],
            [41.991079, 21.444851],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.993924, 21.424622],
            [41.99305, 21.421942] // Nova Makedonija
        ],
        "23": [ 
            [41.997364, 21.495113],
            [41.996013, 21.499641],
            [41.996059, 21.492927],
            [41.996682, 21.476005],
            [41.994193, 21.475514],
            [41.989265, 21.474044],
            [41.982723, 21.47116],
            [41.985402, 21.466416],
            [41.986741, 21.463991],
            [41.989134, 21.458048],
            [41.988336, 21.454121],
            [41.988751, 21.45013],
            [41.991207, 21.446203],
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.993924, 21.424622],
            [41.99305, 21.421942], // Nova Makedonija

            [41.985071, 21.48359],
            [41.982343, 21.481512],
            [41.979803, 21.477402],

            [42.005562, 21.503663],
            [42.006704, 21.504231],
            [42.010576,21.508995]

        ],
        "9": [         
            [41.990314, 21.420625],
            [41.988382, 21.417852],
            [41.990879, 21.430055],
            [41.992494, 21.426525],
            [41.990075, 21.433994],
            [41.992305, 21.438599],

            [41.996634, 21.440633], // MANU
            [42.000089, 21.44013],  // Bit Pazar 1
            [42.000892, 21.439964],
            [42.001943, 21.439822],
            [42.008448, 21.443372],
            [42.013141, 21.445433],
            [42.013665, 21.441602],
            [42.013404,21.434987],
            [42.013121, 21.435824],
            [42.017101, 21.434515],
            [42.019156, 21.432457],
            [42.022339, 21.433389],
            [42.020722, 21.434382]  
        ],
        "22a": [      
            [41.998342, 21.424407],
            [41.999482, 21.418796],
            [42.000885, 21.411898],
            [42.001619, 21.406168],
            [42.00248, 21.399924],
            [42.003668, 21.391427],
            [42.008316, 21.3697],
            [42.006787, 21.375393],
            [42.004575, 21.384637],
            [42.009976, 21.363055],
            [42.015139, 21.358393],
            [42.018623, 21.354766],
            [42.02366, 21.348909],
            [42.028482, 21.353769],
            [41.993924, 21.424622],
            [41.990314, 21.420625],
            [41.988382, 21.417852],
        ],
        "19": [
            [41.998342, 21.424407],
            [41.999482, 21.418796],
            [42.000885, 21.411898],
            [42.001619, 21.406168],
            [42.00248, 21.399924],
            [41.999266, 21.43288],
            [41.998821, 21.439166],
            [42.000089, 21.44013],
            [42.000089, 21.44013],
            [42.000892, 21.439964],
            [42.001943, 21.439822],
            [42.008448, 21.443372],
            [42.013141, 21.445433],
            [42.017624, 21.447533],
            [42.007606, 21.393626],
            [41.997811, 21.42846], // Posta
            [42.021401, 21.448342],
            [42.021766, 21.439328],
            [42.022339, 21.433389],
            [42.026281, 21.429542],
            [42.031943, 21.428052], // Zatvor Sutka
            [42.035282, 21.426321],
            [42.03922, 21.424674],
            [42.042844, 21.423542],
            [42.047656,21.428311]
        ],
        "21": [
            [42.025623, 21.375744],
            [42.025536, 21.380036],
            [42.01623, 21.39114],
            [42.013468, 21.390727],
            [42.013859, 21.382857],
            [42.011121, 21.375819],
            [42.009128,21.369478],
            [42.008316, 21.3697],
            [42.007084, 21.374233],
            [42.004575, 21.384637],
            [42.003668, 21.391427],
            [42.00248, 21.399924],
            [42.001619, 21.406168],
            [42.000885, 21.411898],
            [41.999482, 21.418796],
            [41.998342, 21.424407], 
            [41.993293, 21.442551],
            [41.992305, 21.438599],
            [41.991843, 21.434342],
            [41.994524, 21.430796],
            [41.989861, 21.445324]
        ]
    };

    return data;
}

// Define style of the map
function defineMapStyle() {
    var styles = [
    {
        "featureType": "water",
        "stylers": [
            {
                "saturation": 43
            },
            {
                "lightness": -11
            },
            {
                "hue": "#0088ff"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "hue": "#ff0000"
            },
            {
                "saturation": -100
            },
            {
                "lightness": 99
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "color": "#808080"
            },
            {
                "lightness": 54
            }
        ]
    },
    {
        "featureType": "landscape.man_made",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#ece2d9"
            }
        ]
    },
    {
        "featureType": "poi.park",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#ccdca1"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "labels.text.fill",
        "stylers": [
            {
                "color": "#767676"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "labels.text.stroke",
        "stylers": [
            {
                "color": "#ffffff"
            }
        ]
    },
    {
        "featureType": "poi",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "landscape.natural",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "visibility": "on"
            },
            {
                "color": "#b8cb93"
            }
        ]
    },
    {
        "featureType": "poi.park",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "poi.sports_complex",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "poi.medical",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "poi.business",
        "stylers": [
            {
                "visibility": "simplified"
            }
        ]
    }
];
    return styles;
}

// Define the map
function createMap() {
    var styles = defineMapStyle();


    var styledMap = new google.maps.StyledMapType(styles,
    { name: "Styled Map" });


    mapOptions = {
        zoom: 14,
        minZoom: 13,
        maxZoom: 15,
        disableDefaultUI: true,
        center: new google.maps.LatLng(41.995888, 21.431408), // Plostad, spomenik Voin na konj
        mapTypeControlOptions: {
            mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'map_style']
        }
    };

    map = new google.maps.Map(document.getElementById("mapdisplay"), mapOptions);

    map.mapTypes.set('map_style', styledMap);
    map.setMapTypeId('map_style');
}

// Function that converts degrees in radians
var rad = function (x) {
    return x * Math.PI / 180;
};

// Haversine formula for distance between 2 point on spheric system
function getDistance(p1, p2) {
    var R = 6378137; // Earth’s mean radius in meter
    var dLat = rad(p2.lat() - p1.lat());
    var dLong = rad(p2.lng() - p1.lng());
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) *
      Math.sin(dLong / 2) * Math.sin(dLong / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c;
    return d; // returns the distance in meter
};


// Find closest point to a given point `p` (which is a bus station) from one of the bus lines in the array
function closestPointToBusStation(p, array) {
    var min = getDistance(p, array[0]);
    var ret_el = array[0];
    for (var i = 1; i < array.length; i++) {
        if (getDistance(p, array[i]) < min) {
            ret_el = array[i];
            min = getDistance(p, array[i]);
        }
    }
    return ret_el;
}

// Find closest bus station to a point on map (iterate all bus lines and all bus stations) -- vozdushna linija!!!
function getClosestBusStationToAPoint(point, busLines) {
    var min = getDistance(point, new google.maps.LatLng(busLines["41"][0][0], busLines["41"][0][1]));
    var latt = busLines["41"][0][0];
    var lon = busLines["41"][0][1];

    for (var index in busLines) {
        var linija = busLines[index];
        for (var i = 0; i < linija.length; i++) {
            if (getDistance(point, new google.maps.LatLng(linija[i][0], linija[i][1])) < min) {
                min = getDistance(point, new google.maps.LatLng(linija[i][0], linija[i][1]));
                latt = linija[i][0];
                lon = linija[i][1];
            }
        }
    }
    return new google.maps.LatLng(latt, lon);
}

// Function that returns the polyline between 2 bus stations from one bus line
function findLineBetweenStations(ns, ne, start, end, line) {
    var ret_array = [];
    var end_flag = 0;
    var str_flag = 0;

    for (var i = 0; i < line.length; i++) {
        if (ns.equals(line[i]) && end_flag == 0) {
            ret_array.unshift(start);
            str_flag = 1;
        }
        else if (ns.equals(line[i]) && end_flag == 1) {
            ret_array.push(start);
            break;
        }
        else if (ne.equals(line[i]) && str_flag == 0) {
            ret_array.unshift(end);
            end_flag = 1;
        }
        else if (ne.equals(line[i]) && str_flag == 1) {
            ret_array.push(end);
            break;
        }
        else if (str_flag == 1 || end_flag == 1) {
            ret_array.push(line[i]);
        }
    }

    
    return ret_array;
}

// Find all bus lines that connect the start and end bus stations
function getAllMatchingBusLines(start, end, allLines) {
    var mathing_lines = new Array();
    for (var index in allLines) {
        var cela = allLines[index];
        var foundStart = false;
        var foundEnd = false;
        for (var i = 0; i < cela.length; i++) {
            var linija = cela[i];
            var p = new google.maps.LatLng(linija[0], linija[1]);
            if (!foundStart) {
                if (p.equals(start)) {
                    foundStart = true;
                }
                else {
                    foundStart = false;
                }
            }
            if (!foundEnd) {
                if (p.equals(end)) {
                    foundEnd = true;
                }
                else {
                    foundEnd = false;
                }
            }
        }
        if (foundStart && foundEnd) {
            mathing_lines.push(index);
        }
    }
    return mathing_lines;
}

// Get bus line from bus number as input
function getBusLine(number) {
    var request = new XMLHttpRequest();
    request.open("GET", "/js/" + number + ".xml", false);
    request.send();
    var xml = request.responseXML;
    var points = xml.getElementsByTagName("rtept");
    var latitudes = new Array();
    var longitudes = new Array();

    for (var i = 0; i < points.length; i++) {
        latitudes.push(points[i].getAttribute('lat'));
        longitudes.push(points[i].getAttribute('lon'));
    }

    var line = [];
    for (var i = 0; i < points.length; i++) {
        line.push(new google.maps.LatLng(latitudes[i], longitudes[i]));
    }

    return line;
}

// Get the shortest bus line from array of matching bus lines between 2 points
function getShortestBusLineNumber(lines, start, end) {
    var shortest_line = 1000000;
    var line_num = null;
    var linija = [];

    // Find the shorthes bus line between 2 points
    for (var i = 0; i < lines.length; i++) {

        linija = getBusLine(lines[i].toString());

        // Closest point from the bus line for the start and end bus stations
        var ns = closestPointToBusStation(start, linija);
        var ne = closestPointToBusStation(end, linija);

        // Bus line between the two bus stations
        var cniza = findLineBetweenStations(ns, ne, start, end, linija);
        if (google.maps.geometry.spherical.computeLength(cniza) < shortest_line) {
            shortest_line = google.maps.geometry.spherical.computeLength(cniza);
            line_num = lines[i];
        }
    }
    return line_num;
}

// Return all bus lines that have mutual bus station --> (start bus line, end bus line, mutual bus station)
function allBusLinesWithMutualStation(start_lines, end_lines, data) {
    var megju_niza = new Array();

    for (var i = 0; i < start_lines.length; i++) {
        var startniStanici = data[start_lines[i].toString()];

        for (var j = 0; j < startniStanici.length; j++) {
            var s = new google.maps.LatLng(startniStanici[j][0], startniStanici[j][1]);

            for (var k = 0; k < end_lines.length; k++) {
                var endStanici = data[end_lines[k].toString()];

                for (var z = 0; z < endStanici.length; z++) {
                    var e = new google.maps.LatLng(endStanici[z][0], endStanici[z][1]);

                    if (e.equals(s)) {
                        var el = [start_lines[i], end_lines[k], s];
                        megju_niza.push(el);
                    }
                }
            }
        }
    }
    return megju_niza;
}

// Get all bus lines connected to the bus lines 'l' and the bus stations that are connecting them together
function getBusLinesConnectedToBusLines(l, data) {
    var site_linii = [];

    for (var i = 0; i < l.length; i++) {
        var stanici = data[l[i].toString()];
        for (var j = 0; j < stanici.length; j++) {
            var s = new google.maps.LatLng(stanici[j][0], stanici[j][1]);
            var lines = getAllMatchingBusLines(s, s, data);
            for (var k = 0; k < lines.length; k++) {
                if (site_linii.indexOf(lines[k]) == -1 && lines[k] != l[i]) {
                    var temp = {
                        start_line: l[i],
                        end_line: lines[k],
                        busStation: s
                    };
                    site_linii.push(temp);
                }
            }
        }
    }
    return site_linii;
}

// Find the best path between 2 bus station, with one bus station between them
function findBestLineFromTwoCombinedLines(megju_niza, start, end) {
    var min_length = 1000000;
    var temp = null;

    for (var i = 0; i < megju_niza.length; i++) {
        // Number of the first bus line
        var start_line = megju_niza[i][0];
        // Number of the second bus line
        var end_line = megju_niza[i][1];
        // Mutual bus station of the two bus stations
        var zaednicka_stanica = megju_niza[i][2];

        // Get the whole start bus line
        var fullStartLine = getBusLine(start_line);

        var ns = closestPointToBusStation(start, fullStartLine);
        var ne = closestPointToBusStation(zaednicka_stanica, fullStartLine);

        var cniza1 = findLineBetweenStations(ns, ne, start, zaednicka_stanica, fullStartLine);

        fullEndLine = getBusLine(end_line);

        // Closest point from the bus line for the start and end bus stations
        ns = closestPointToBusStation(end, fullEndLine);
        ne = closestPointToBusStation(zaednicka_stanica, fullEndLine);

        // Bus line between the two bus stations
        cniza2 = findLineBetweenStations(ns, ne, end, zaednicka_stanica, fullEndLine);

        var len = google.maps.geometry.spherical.computeLength(cniza1) + google.maps.geometry.spherical.computeLength(cniza2);
        if (len < min_length) {
            min_length = len;
            temp = {
                bls: cniza1,
                ble: cniza2,
                ss: start_line,
                ee: end_line,
                zaednicka: zaednicka_stanica
            }
        }
    }
    return temp;
}

// Draw lines and markers on the map
function draw(pateki, markeri) {
    

    for (var i = 0; i < pateki.length; i++) {

        path = new google.maps.Polyline({
            path: pateki[i],
            geodesic: true,
            strokeColor: colors[i],
            strokeOpacity: 0.5,
            strokeWeight: 11
        });

        path.setMap(map);
        paths.push(path);
    }

    for (var i = 0; i < markeri.length; i++) {
        var marker = new google.maps.Marker({
            position: markeri[i],
            map: map,
            icon: new google.maps.MarkerImage("/images/markers/medium_marker1.png", null, null, null, new google.maps.Size(40, 55))
        });

        markers.push(marker);
    }
}

function draw3Lines(data, start, end, start_lines, end_lines) {
    // Get all lines from the start bus station, all other lines that are connected to the first lines, 
    // and the bus station which is the connection between the lines
    var linii_na_start = getBusLinesConnectedToBusLines(start_lines, data);

    // Get all lines from the end bus station, all other lines that are connected to the first lines, 
    // and the bus station which is the connection between the lines
    var linii_na_end = getBusLinesConnectedToBusLines(end_lines, data);


    var linija_start;
    var linija_end;
    var linija_megju1;
    var linija_megju2;
    var boundBusStation1;
    var boundBusStation2;

    var zname = false;

    for (var i = 0; i < linii_na_start.length; i++) {
        linija_start = linii_na_start[i].start_line;
        linija_megju1 = linii_na_start[i].end_line;
        boundBusStation1 = linii_na_start[i].busStation;

        for (var j = 0; j < linii_na_end.length; j++) {
            linija_end = linii_na_end[j].start_line;
            linija_megju2 = linii_na_end[j].end_line;
            boundBusStation2 = linii_na_end[j].busStation;

            if (linija_megju2 == linija_megju1) {
                document.getElementById("txt_msg").innerHTML = "Directions: Get on bus <label style='color:#bcd02e; font-size:20px;'><b>#" + linija_start + "</b></label>, switch to bus <label style='color:#2e6bd0; font-size:20px;'><b>#" + linija_megju2 + "</b></label> and then switch to bus <label style='color:#ff0000; font-size:20px;'><b>#" + linija_end + "</b></label>";
                var msg = document.getElementById("message");
                msg.style.display = "block";
                var err = document.getElementById("error");
                err.style.display = "none";

                zname = true;
                break;
            }
        }
        if (zname == true) break;
    }
    if (zname == false) {
        document.getElementById("txt_err").innerHTML = "Line can not be found between the start and end point";
        var msg = document.getElementById("message");
        msg.style.display = "none";
        var err = document.getElementById("error");
        err.style.display = "block";
    }

    var start_line = getBusLine(linija_start.toString());
    var end_line = getBusLine(linija_end.toString());
    var megju_line = getBusLine(linija_megju1.toString());


    var ns = closestPointToBusStation(start, start_line);
    var ne = closestPointToBusStation(boundBusStation1, start_line);
    var cniza1 = findLineBetweenStations(ns, ne, start, boundBusStation1, start_line);

    ns = closestPointToBusStation(boundBusStation2, end_line);
    ne = closestPointToBusStation(end, end_line);
    var cniza2 = findLineBetweenStations(ns, ne, boundBusStation2, end, end_line);

    ns = closestPointToBusStation(boundBusStation1, megju_line);
    ne = closestPointToBusStation(boundBusStation2, megju_line);
    var cniza3 = findLineBetweenStations(ns, ne, boundBusStation1, boundBusStation2, megju_line);

    draw([cniza1, cniza2, cniza3], [boundBusStation1, boundBusStation2]);
}

function draw2Lines(megju_niza, start, end) {

    // Find the line with shortest distance between the start and end bus station (with one bus station between them)
    var temp = findBestLineFromTwoCombinedLines(megju_niza, start, end);

    draw([temp.bls, temp.ble], [temp.zaednicka]);

    document.getElementById("txt_msg").innerHTML = "Directions: Get on bus <label style='color:#bcd02e; font-size:20px;'><b>#" + temp.ss + "</b></label> and then switch to bus <label style='color:#ff0000; font-size:20px;'><b>#" + temp.ee + "</b></label>";
    var msg = document.getElementById("message");
    msg.style.display = "block";
    var err = document.getElementById("error");
    err.style.display = "none";
}

function draw1Line(all_lines_between, start, end) {
    // Find the shorthes bus line between 2 points
    var flightPlanCoordinates = getBusLine(getShortestBusLineNumber(all_lines_between, start, end));

    // Closest point from the bus line for the start and end bus stations
    var ns = closestPointToBusStation(start, flightPlanCoordinates);
    var ne = closestPointToBusStation(end, flightPlanCoordinates);

    // Bus line between the two bus stations
    var cniza = findLineBetweenStations(ns, ne, start, end, flightPlanCoordinates);

    draw([cniza], []);

    document.getElementById("txt_msg").innerHTML = "Directions: Get on bus <label style='color:#bcd02e; font-size:20px;'><b>#" + getShortestBusLineNumber(all_lines_between, start, end) + "</b></label>";
    var msg = document.getElementById("message");
    msg.style.display = "block";
    var err = document.getElementById("error");
    err.style.display = "none";
}

// Get the current location of the user/device using GPS
function getLocation() {

    var txtPole = document.getElementById("origin");
    if (gps_flag) {
        use_gps = true;
        gps_flag = false;
        txtPole.readOnly = true;
        txtPole.value = "";
        auto1 = false;
    }
    else {
        gps_flag = true;
        use_gps = false;
        txtPole.readOnly = false;
    }
}

// show message if the current location can not be found
function showError(error) {
    switch (error.code) {
        case error.PERMISSION_DENIED:
            document.getElementById("txt_err").innerHTML = "User denied the request for Geolocation."
            break;
        case error.POSITION_UNAVAILABLE:
            document.getElementById("txt_err").innerHTML = "Location information is unavailable."
            break;
        case error.TIMEOUT:
            document.getElementById("txt_err").innerHTML = "The request to get user location timed out."
            break;
        case error.UNKNOWN_ERROR:
            document.getElementById("txt_err").innerHTML = "An unknown error occurred."
            break;
    }
    var msg = document.getElementById("message");
    msg.style.display = "none";
    var err = document.getElementById("error");
    err.style.display = "block";
}

// Find the closest bus station to the current location of the user (using GPS), and put start marker on the station
function getCurrentPosition(position) {
    // get all bus lines and bus stations
    var data = getLinesArray();

    x = 1;

    // delete old informations from the map (markers and polylines)
    clearMap();

    // get the point where the user is now
    var currentLoc = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
    //get the closest bus station to the point 
    var myLatLng = getClosestBusStationToAPoint(currentLoc, data);

    // make marker for the closest bus station
    var marker = new google.maps.Marker({
        position: myLatLng,
        map: map,
        icon: new google.maps.MarkerImage("/images/markers/start_marker.png", null, null, null, new google.maps.Size(40, 55))
    });

    markers.push(marker);

    marker = new google.maps.Marker({
        position: currentLoc,
        map: map,
        icon: new google.maps.MarkerImage("/images/markers/walk_marker.png", null, null, null, new google.maps.Size(40, 55))
    });

    markers.push(marker);

    // center the map on the point where the user is currently
    map.setCenter(myLatLng);
    
    niza.push(myLatLng);
    

    drawWalk(currentLoc, myLatLng);
}

// delete all markers and polyline from the map
function clearMap() {
    for (var i = 0; i < paths.length; i++) paths[i].setMap(null);
    for (var i = 0; i < markers.length; i++) markers[i].setMap(null);
    niza = new Array();
    markers = new Array();
    paths = new Array();
}

// draw walking route from one to another point
function drawWalk(start, end) {

    var directionsService = new google.maps.DirectionsService();

    var request = {
        origin: start,
        destination: end,
        travelMode: google.maps.TravelMode.DRIVING
    };

    directionsService.route(request, function (result, status) {
        if (status == google.maps.DirectionsStatus.OK) {

            var path = [start];
            for (var i = 0; i < result.routes[0].overview_path.length; i++) {
                path.push(result.routes[0].overview_path[i]);
            }


            var path = new google.maps.Polyline({
                path: path,
                geodesic: true,
                strokeColor: "#871987",
                strokeOpacity: 0.3,
                icons: [{
                    icon: {
                        path: 'M 0,-0.5 0, 0.5',
                        strokeWeight: 5,
                        strokeOpacity: 1,
                        scale: 1
                    },
                    offset: '100%',
                    repeat: '20px'
                }]
            });
            path.setMap(map);
            paths.push(path);
        }
    });

}

// Use textual address of source and destination to find the route
function getCoordinatesByAddress() {
    var startCoor = textStartAddress;
    var endCoor = textEndAddress;

    var geocoder = new google.maps.Geocoder();
    clearMap();
    
    if (!use_gps) {
        if (auto1 && auto2) {
            if (startCoor && endCoor) {
                if (!startCoor.equals(endCoor)) {
                    var data = getLinesArray();

                    var start = getClosestBusStationToAPoint(startCoor, data);
                    var end = getClosestBusStationToAPoint(endCoor, data);

                    var img = "/images/markers/start_marker.png";
                    var marker = new google.maps.Marker({
                        position: start,
                        map: map,
                        icon: new google.maps.MarkerImage(img, null, null, null, new google.maps.Size(40, 55))
                    });

                    map.setCenter(start);

                    markers.push(marker);
                    niza.push(marker);

                    img = "/images/markers/end_marker.png";
                    marker = new google.maps.Marker({
                        position: end,
                        map: map,
                        icon: new google.maps.MarkerImage(img, null, null, null, new google.maps.Size(40, 55))
                    });

                    markers.push(marker);
                    niza.push(marker);


                    var all_lines_between = getAllMatchingBusLines(start, end, data);

                    // 1.  If there is at least one bus line between the start and end bus stations, 
                    //     choose the best (if necessary ) and draw it
                    // 2.  if there aren't bus lines that are directly connecting the start and end bus station, find if there is one or two
                    //     bus stations between the start and end bus station, and from there, draw two or three bus lines, respectively
                    if (all_lines_between[0] != null) {
                        draw1Line(all_lines_between, start, end);
                    }
                    else {
                        // Get all lines that cross the start bus station
                        var start_lines = getAllMatchingBusLines(start, start, data);

                        // Get all lines that cross the end bus station
                        var end_lines = getAllMatchingBusLines(end, end, data);

                        // Return all start and end bus lines that have mutual bus station together with the mutual bus station
                        // Find point that combines some of the start and end bus lines. After that, we will choose one of the combination
                        // to draw the bus route
                        var megju_niza = allBusLinesWithMutualStation(start_lines, end_lines, data);

                        // If there aren't any mutual bus station, it means we have to draw 3 bus lines between the start and end bus station
                        if (megju_niza[0] == null) {
                            draw3Lines(data, start, end, start_lines, end_lines);
                        }
                        else {
                            draw2Lines(megju_niza, start, end);
                        }
                    }
                }
                else {
                    document.getElementById("txt_err").innerHTML = "Type different addresses";
                    var msg = document.getElementById("message");
                    msg.style.display = "none";
                    var err = document.getElementById("error");
                    err.style.display = "block";
                }
            }
            else {
                document.getElementById("txt_err").innerHTML = "Type correct addresses in the fields";
                var msg = document.getElementById("message");
                msg.style.display = "none";
                var err = document.getElementById("error");
                err.style.display = "block";
            }
        }
        else {
            document.getElementById("txt_err").innerHTML = "To obtain the address use the <i>autocomplete</i> form of suitable addresses";
            var msg = document.getElementById("message");
            msg.style.display = "none";
            var err = document.getElementById("error");
            err.style.display = "block";
        }
    }
    else {
        if (auto2) {
            if (endCoor) {

                if (navigator.geolocation) {
                            navigator.geolocation.getCurrentPosition(function (position) {

                                // get all bus lines and bus stations
                                var data = getLinesArray();

                                // get the point where the user is now
                                var currentLoc = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                                //get the closest bus station to the point 
                                var start = getClosestBusStationToAPoint(currentLoc, data);
                                var end = getClosestBusStationToAPoint(endCoor, data);

                                if (!start.equals(end)) {

                                    // make marker for the closest bus station
                                    var marker = new google.maps.Marker({
                                        position: start,
                                        map: map,
                                        icon: new google.maps.MarkerImage("/images/markers/start_marker.png", null, null, null, new google.maps.Size(40, 55))
                                    });

                                    markers.push(marker);

                                    marker = new google.maps.Marker({
                                        position: currentLoc,
                                        map: map,
                                        icon: new google.maps.MarkerImage("/images/markers/walk_marker.png", null, null, null, new google.maps.Size(40, 55))
                                    });

                                    markers.push(marker);

                                    // center the map on the point where the user is currently
                                    map.setCenter(start);

                                    niza.push(start);


                                    drawWalk(currentLoc, start);


                                    

                                    var img = "/images/markers/start_marker.png";
                                    var marker = new google.maps.Marker({
                                        position: start,
                                        map: map,
                                        icon: new google.maps.MarkerImage(img, null, null, null, new google.maps.Size(40, 55))
                                    });

                                    markers.push(marker);
                                    niza.push(marker);

                                    img = "/images/markers/end_marker.png";
                                    marker = new google.maps.Marker({
                                        position: end,
                                        map: map,
                                        icon: new google.maps.MarkerImage(img, null, null, null, new google.maps.Size(40, 55))
                                    });

                                    markers.push(marker);
                                    niza.push(marker);


                                    var all_lines_between = getAllMatchingBusLines(start, end, data);

                                    // 1.  If there is at least one bus line between the start and end bus stations, 
                                    //     choose the best (if necessary ) and draw it
                                    // 2.  if there aren't bus lines that are directly connecting the start and end bus station, find if there is one or two
                                    //     bus stations between the start and end bus station, and from there, draw two or three bus lines, respectively
                                    if (all_lines_between[0] != null) {
                                        draw1Line(all_lines_between, start, end);
                                    }
                                    else {
                                        // Get all lines that cross the start bus station
                                        var start_lines = getAllMatchingBusLines(start, start, data);

                                        // Get all lines that cross the end bus station
                                        var end_lines = getAllMatchingBusLines(end, end, data);

                                        // Return all start and end bus lines that have mutual bus station together with the mutual bus station
                                        // Find point that combines some of the start and end bus lines. After that, we will choose one of the combination
                                        // to draw the bus route
                                        var megju_niza = allBusLinesWithMutualStation(start_lines, end_lines, data);

                                        // If there aren't any mutual bus station, it means we have to draw 3 bus lines between the start and end bus station
                                        if (megju_niza[0] == null) {
                                            draw3Lines(data, start, end, start_lines, end_lines);
                                        }
                                        else {
                                            draw2Lines(megju_niza, start, end);
                                        }
                                    }
                                }
                                else {
                                    document.getElementById("txt_err").innerHTML = "The address you have typed is near or the same with the address of the current location. Please type another address";
                                    var msg = document.getElementById("message");
                                    msg.style.display = "none";
                                    var err = document.getElementById("error");
                                    err.style.display = "block";
                                }

                                
                            }, showError);
                        }
                        else {
                            document.getElementById("txt_err").innerHTML = "Geolocation is not supported by this application";
                            var msg = document.getElementById("message");
                            msg.style.display = "none";
                            var err = document.getElementById("error");
                            err.style.display = "block";
                        }
            }
            else {
                document.getElementById("txt_err").innerHTML = "Type correct addresses in the fields";
                var msg = document.getElementById("message");
                msg.style.display = "none";
                var err = document.getElementById("error");
                err.style.display = "block";
            }
        }
        else {
            document.getElementById("txt_err").innerHTML = "To obtain the address use the <i>autocomplete</i> form of suitable addresses";
            var msg = document.getElementById("message");
            msg.style.display = "none";
            var err = document.getElementById("error");
            err.style.display = "block";
        }
    }


    flag = false;
    start = null;
}

// Initialization and event handling the autocomplete component of the text areas
function Autocomplete() {
    var input1 = document.getElementById('origin');
    var input2 = document.getElementById('destination');


    var southWest = new google.maps.LatLng(41.903539, 21.257858);
    var northEast = new google.maps.LatLng(42.095404, 21.682205);
    var hyderabadBounds = new google.maps.LatLngBounds(southWest, northEast);

    options = {
        bounds: hyderabadBounds,
        componentRestrictions: {
            country: 'MK',
        }
    };

    var autocomplete1 = new google.maps.places.Autocomplete(input1, options);
    autocomplete1.setBounds(hyderabadBounds);
    //autocomplete1.bindTo('bounds', map);

    var autocomplete2 = new google.maps.places.Autocomplete(input2, options);
    autocomplete2.setBounds(hyderabadBounds);
    //autocomplete2.bindTo('bounds', map);

    google.maps.event.addListener(autocomplete1, 'place_changed', function () {
        var place = autocomplete1.getPlace();

        if (place.geometry != null) {
            textStartAddress = place.geometry.location;
            auto1 = true;
        }
        else {
            document.getElementById("txt_err").innerHTML = "We are unable to locate the start address";
            var msg = document.getElementById("message");
            msg.style.display = "none";
            var err = document.getElementById("error");
            err.style.display = "block";
            auto1 = false;
        }
    });

    google.maps.event.addListener(autocomplete2, 'place_changed', function () {
        var place = autocomplete2.getPlace();

        if (place.geometry != null) {
            textEndAddress = place.geometry.location;
            auto2 = true;
        }
        else {
            document.getElementById("txt_err").innerHTML = "We are unable to locate the end address";
            var msg = document.getElementById("message");
            msg.style.display = "none";
            var err = document.getElementById("error");
            err.style.display = "block";
            auto2 = false;
        }
    });
}

function textChange1() {
    auto1 = false;
}

function textChange2() {
    auto2 = false;
}

function drawBusLine(number) {
    var request = new XMLHttpRequest();
    request.open("GET", "/js/"+number+".xml", false);
    request.send();
    var xml = request.responseXML;
    var points = xml.getElementsByTagName("rtept");
    var latitudes = new Array();
    var longitudes = new Array();
    for (var i = 0; i < points.length; i++) {
        latitudes.push(points[i].getAttribute('lat'));
        longitudes.push(points[i].getAttribute('lon'));
    }
    var line = [];
    for (var i = 0; i < points.length; i++) {
        line.push(new google.maps.LatLng(latitudes[i], longitudes[i]));
    }
    path = new google.maps.Polyline({
        path: line,
        geodesic: true,
        strokeColor: "#FF0000",
        strokeOpacity: 0.5,
        strokeWeight: 11
    });
    path.setMap(map);
    var busLines = new Array();
    busLines = getLinesArray();
    var stanici = new Array();




    for (var index in busLines) {
        if (index == number) {
            for (var i = 0; i < busLines[index].length; i++) {
                var marker = new google.maps.Marker({
                    position: new google.maps.LatLng(busLines[index][i][0], busLines[index][i][1]),
                    map: map,
                    icon: new google.maps.MarkerImage("/images/markers/medium_marker1.png", null, null, null, new google.maps.Size(40, 55))
                });
                marker.setMap(map);
            }
        }

    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function initialize() {
    createMap();
    Autocomplete();

    var data = getLinesArray();

    google.maps.event.addListener(map, 'click', function (event) {

        x++;
        // Find if we have previously draw line and set markers. If so, delete them all
        if (x == 1 && flag == false) {
            // delete old informations from the map, i.e. preprare the map for new markers and polylines
            clearMap();
        }

        if (x <= 2) {
            var msg = document.getElementById("message");
            msg.style.display = "none";
            var err = document.getElementById("error");
            err.style.display = "none";

            var lat = event.latLng.lat();
            var lng = event.latLng.lng();

            // point on map
            var point = new google.maps.LatLng(lat, lng);
            // closest bus station to the point
            var myLatLng = getClosestBusStationToAPoint(point, data);


            if (x == 2 && niza[0].equals(myLatLng) == true) {
                // neka iskoci prozorce deka treba da se klikne na razlicno mesto!!!!!!!!!!!!!!!!
                x--;
            }
            else {
                drawWalk(point, myLatLng);

                niza.push(myLatLng);

                var img = null;
                if (x == 1) img = "/images/markers/start_marker.png";
                else img = "/images/markers/end_marker.png";

                var marker = new google.maps.Marker({
                    position: point,
                    map: map,
                    icon: new google.maps.MarkerImage("/images/markers/walk_marker.png", null, null, null, new google.maps.Size(40, 55))
                });
                
                markers.push(marker);

                marker = new google.maps.Marker({
                    position: myLatLng,
                    map: map,
                    icon: new google.maps.MarkerImage(img, null, null, null, new google.maps.Size(40, 55))
                });

                markers.push(marker);
            }
        }
        if (x == 2) {
            
            flag = false;

            // Start and End bus stations
            var start = niza[0];
            var end = niza[1];


            // All bus lines that connect start and end bus stations
            var all_lines_between = getAllMatchingBusLines(start, end, data);

            // 1.  If there is at least one bus line between the start and end bus stations, 
            //     choose the best (if necessary ) and draw it
            // 2.  if there aren't bus lines that are directly connecting the start and end bus station, find if there is one or two
            //     bus stations between the start and end bus station, and from there, draw two or three bus lines, respectively
            if (all_lines_between[0] != null) {
                draw1Line(all_lines_between, start, end);
            }
            else {
                // Get all lines that cross the start bus station
                var start_lines = getAllMatchingBusLines(start, start, data);

                // Get all lines that cross the end bus station
                var end_lines = getAllMatchingBusLines(end, end, data);

                // Return all start and end bus lines that have mutual bus station together with the mutual bus station
                // Find point that combines some of the start and end bus lines. After that, we will choose one of the combination
                // to draw the bus route
                var megju_niza = allBusLinesWithMutualStation(start_lines, end_lines, data);

                // If there aren't any mutual bus station, it means we have to draw 3 bus lines between the start and end bus station
                if (megju_niza[0] == null) {
                    draw3Lines(data, start, end, start_lines, end_lines);
                }
                else {
                    draw2Lines(megju_niza, start, end);
                }
            }
            x = 0;

        } // if (x==2)
    });

};



    google.maps.event.addDomListener(window, 'load', initialize);




